# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

AWSTemplateFormatVersion: 2010-09-09
Description: my-test-app
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 100
    MemorySize: 128
    Runtime: nodejs14.x
    Handler: index.handler
    Environment:
      Variables:
        MY_TASKS_TABLE: !Ref MyTasksTable
Parameters:
  StageName:
    Type: String
    Default: dev
  JWTSecret:
    Type: String
Resources:
  MyTasksApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      OpenApiVersion: "3.0.3"
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizerFunction.Arn
            Identity:
              ValidationExpression: Bearer.*
              ReauthorizeEvery: 3600
  #### USER RELATED RESOURCES ####
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/get-user/
      Description: A Lambda function that returns a user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        GetUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: GET
            Path: /users/{userId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/create-user/
      Description: A Lambda function that creates a user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        CreateUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: POST
            Path: /users
            Auth:
              Authorizer: NONE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  PatchUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/patch-user/
      Description: A Lambda function that patches a user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        PatchUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: PATCH
            Path: /users/{userId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/delete-user/
      Description: A Lambda function that delete a user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        DeleteUserApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: DELETE
            Path: /users/{userId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  ### AUTH RELATED RESOURCES ####
  LambdaAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/lambda-authorizer/
      Description: A Lambda function that checks if the user is authorized to access the API
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
          ACCOUNT_ID: !Sub "${AWS::AccountId}"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/login/
      Description: A Lambda function that logs in a user
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: POST
            Path: /auth/signin
            Auth:
              Authorizer: NONE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  #### LIST RELATED RESOURCES ####
  CreateListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list/create-list/
      Description: A Lambda function that creates a list for the specified user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        CreateListApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: POST
            Path: /users/{userId}/lists
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  GetListsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list/get-lists/
      Description: A Lambda function that gets the lists of the specified user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        GetListsApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: GET
            Path: /users/{userId}/lists/
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  DeleteListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list/delete-list/
      Description: A Lambda function that delete a list of the specified user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        DeleteListApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: DELETE
            Path: /users/{userId}/lists/{listId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  #### TASK RELATED RESOURCES ####
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/task/create-task/
      Description: A Lambda function that creates a task for the specified user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        CreateTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: POST
            Path: /lists/{listId}/tasks
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/task/get-tasks/
      Description: A Lambda function that gets the tasks of the specified list
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        GetTasksApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: GET
            Path: /lists/{listId}/tasks/
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/task/update-task/
      Description: A Lambda function that updates a task for the specified user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        UpdateTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: PUT
            Path: /lists/{listId}/tasks/{taskId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/task/delete-task/
      Description: A Lambda function that deletes a task of the specified user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTasksTable
      Events:
        DeleteTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref MyTasksApi
            Method: DELETE
            Path: /lists/{listId}/tasks/{taskId}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  ### DATA STORAGE ###
  MyTasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: user-email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
